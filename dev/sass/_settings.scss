

// The scale variable is used in a variety  of
// of fuctions to establish consistent sizes for
// font sizes, heights, etc.
// Currently this is based on an augmented fourth scale.
$scaleOLD: (
    -4: 0.25rem
  , -3: 0.354rem
  , -2: 0.5rem
  , -1: 0.707rem
  , 1: 1rem
  , 2: 1.414rem
  , 3: 1.999rem
  , 4: 2.827rem
  , 5: 3.998rem
  , 6: 5.653rem
  , 7: 7.993rem
  , 8: 11.302rem
  , 9: 15.981rem
  , 10: 22.597rem
  , 11: 31.952rem
  , 12: 45.18rem
  , 13: 63.884rem
  , 14: 90.332rem
  , 15: 127.73rem
  , 16: 180.61rem
) !default;

// This is a test scale based on http://type-scale.com/
// the Perfect Fourth.
// (so annoying that this webiste doesn't maintain state in their URL.
// wait, they do:http://type-scale.com/?size=16&scale=1.333&text=A%20Visual%20Type%20Scale&webfont=Libre+Baskerville&font-family=%27Libre%20Baskerville%27,%20serif&font-weight=400&font-family-headers=&font-weight-headers=inherit&background-color=white&font-color=%23333)
$scale: (
      -5: 0.25rem
    , -4: 0.317rem
    , -3: 0.422rem
    , -2: 0.563rem
    , -1: 0.75rem
    , 1: 1rem
    , 2: 1.333rem
    , 3: 1.777rem
    , 4: 2.369rem
    , 5: 3.157rem
    , 6: 4.209rem
    , 7: 5.61rem
    , 8: 7.478rem
    , 9: 9.969rem
    , 10: 13.288rem
    , 11: 17.713rem
    , 12: 23.612rem
    , 13: 31.475rem
    , 14: 41.956rem
    , 15: 55.927rem
    , 16: 74.551rem
    , 17: 99.376rem
) !default;


// Function that returns a value from the $scale array.
@function base-scale($x){
  @return map-get($scale, $x);
}


// Typography
$font-size: 16px !default;
$font-family: 'Graphik Web', 'Helvetica Neue', Helvetica, sans-serif !default;
$line-height: 1.5 !default;
$heading-font-family: $font-family !default;
$heading-font-weight: bold !default;
$heading-line-height: 1.25 !default;
$monospace-font-family: 'Source Code Pro', Consolas, monospace !default;

$font-sizes: (
    'xs': base-scale(-2)
  , 'sm': base-scale(-1)
  , 'md': base-scale(1)
  , 'lg': base-scale(2)
  , 'xl': base-scale(3)
  , 'xxl': base-scale(4)
  , 'xxxl': base-scale(5)
  , 'xxxxl': base-scale(6)
  , 'xxxxxl': base-scale(7)
) !default;

@function font-size($x){
  @return map-get($font-sizes, $x);
}

$h1: font-size('xxl') !default;
$h2: font-size('xl')  !default;
$h3: font-size('lg')  !default;
$h4: font-size('md')  !default;
$h5: font-size('sm')  !default;
$h6: font-size('sm')  !default;


// Colors
$colors: (
    orange:     #F15F22, 
    orange-100: #FCDED2,
    orange-300: #F5956D, 
    orange-500: #C95125,
    orange-600: #A34425,
    bright-orange: #F7991F,
    bright-orange-100: #FDE5C5,
    bright-orange-300: #F9B357, 
    bright-orange-500: #D7851C, 
    bright-orange-600: #B87214, 
    yellow: #FFC10E, 
    yellow-100: #FFECB6, 
    yellow-300: #FFD55D, 
    yellow-500: #DCA712, 
    yellow-600: #BC8F0D, 
    magenta: #E62565, 
    magenta-100: #F9C8D8, 
    magenta-300: #EB5386, 
    magenta-500: #C61E58, 
    magenta-600: #AA144B, 
    nkf-cyan: #39ACE2, 
    nkf-cyan-100: #DBF0FA, 
    nkf-cyan-300: #6BC1E9, 
    nkf-cyan-500: #3290BD, 
    nkf-cyan-600: #2A6E91, 
    aqua: #4AC1B9, 
    aqua-100: #CFEBE7, 
    aqua-300: #6BC8C1, 
    aqua-500: #3EA8A3, 
    aqua-600: #21736F, 
    gray: #9D9FA2, 
    gray-100: #EFEFF0, 
    gray-200: #E9E9EA, 
    gray-300: #D1D3D4, 
    gray-500: #67686B, 
    gray-600: #4d4d4F, 
    gray-700: #231F20, 
    blue: #39ACE2, 
    sky: #DBF0FA, 
    navy: #39ace2, 
    red: #E62565, 
    mustard: #F7991F, 
    green: #4AC1B9, 
    lime: #4AC1B9, 
    sienna: #E62565, 
    white: #FFFFFF, 
    gray-1: #EFEFF0, 
    gray-2: #D1D3D4, 
    gray-3: #9D9FA2, 
    gray-4: #4d4d4F, 
    gray-5: #231F20, 
    black: #000, 
    twitter: #4099FF, 
    facebook: #3b5998, 
    instagram: #e95950, 
    linkedin: #4875B4, 
    googleplus: #C63D2D, 
    youtube: #FF3333, 
    pinterest: #BD081C
) !default;

$white: #fff !default;
$gray-1: #EFEFF0 !default;
$gray-2: #D1D3D4 !default;
$gray-3: #9D9FA2 !default;
$gray-4: #4d4d4F !default;
$gray-5: #231F20 !default;
$black: #000 !default;

$twitter: #4099FF !default;
$facebook: #3b5998 !default;
$instagram: #e95950 !default;

@function color($x){
  @return map-get($colors, $x);
}

$link-color: color(gray-4); 
$link-color-hover: color(orange) !default;
$link-color-active: $link-color !default;
$link-color-visited: $link-color !default;

// Spacing, used for padding and margin
$spaces: (
    'none': 0
  , 'xxxs': base-scale(-5)
  , 'xxs': base-scale(-3)
  , 'xs': base-scale(-2)
  , 'sm': base-scale(-1)
  , 'md': base-scale(1)
  , 'lg': base-scale(2)
  , 'xl': base-scale(3)
  , 'xxl': base-scale(4)
  , 'xxxl': base-scale(5)
) !default;

@function space($x){
  @return map-get($spaces, $x);
}
// Widths
$widths: (
    '0': 0
  , '5': 5%
  , '10': 10%
  , '15': 15%
  , '20': 20%
  , '25': 25%
  , '30': 30%
  , '33': 1/3 * 100%
  , '35': 35%
  , '40': 40%
  , '45': 45%
  , '50': 50%
  , '55': 55%
  , '60': 60%
  , '65': 65%
  , '66': 2/3 * 100%
  , '70': 70%
  , '75': 75%
  , '80': 80%
  , '85': 85%
  , '90': 90%
  , '95': 95%
  , '100': 100%
  , 'auto': 'auto'

) !default;

@function width($width){
  @return map-get($widths, $width);
}

// Heights
$heights: (
    'xxxs': base-scale(-1)
  , 'xxs': base-scale(1)
  , 'xs': base-scale(2)
  , 'sm': base-scale(4)
  , 'md': base-scale(9)
  , 'lg': base-scale(11)
  , 'xl': base-scale(12)
  , 'xxl': base-scale(13)
  , 'xxxl': base-scale(15)
) !default;


@function height($x){
  @return map-get($heights, $x);
}
// Heights
$squares: (
    'xxxs': base-scale(-1)
  , 'xxs': base-scale(1)
  , 'xs': base-scale(2)
  , 'sm': base-scale(4)
  , 'md': base-scale(6)
  , 'lg': base-scale(9)
  , 'xl': base-scale(12)
  , 'xxl': base-scale(15)
) !default;


@function square($x){
  @return map-get($squares, $x);
}

@mixin caps {
  text-transform: uppercase;
  letter-spacing: .11rem !important;
}

$containers: (
    'xs': base-scale(1)
  , 'sm': base-scale(3)
  , 'md': base-scale(9)
  //, 'lg': base-scale(13)
  , 'lg': 73.75rem
  , 'xl': base-scale(17)
) !default;

@function container($x){
  @return map-get($containers, $x);
}

// Borders
$border-widths: (
    'none': 0
  , 'xs': 1px
  , 'sm': 2px
  , 'md': base-scale(-4)
  , 'lg': base-scale(-2)
  , 'xl': base-scale(1)
) !default;

@function border-width($x){
  @return map-get($border-widths, $x);
}

$breakpoints: (
    'xs': '(min-width: 24em)'
  , 'sm': '(min-width: 40em)'
  , 'md': '(min-width: 52em)'
  , 'lg': '(min-width: 64em)'
  , 'xl': '(min-width: 75em)'
) !default;

@function breakpoint($breakpoint){
  @return map-get($breakpoints, $breakpoint);
}

@mixin when($media) {
  @media #{breakpoint($media)} { @content; }
}

// helper functions
@function strip-units($number) {
  @if $number == 'auto' {
    @return $number;
  }
  @return ($number / ($number * 0 + 1)) / 100;
}

//https://codepen.io/bluesaunders/pen/FCLaz/?editors=1100
// Calculeate brightness of a given color.
@function brightness($color) {
  @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
}



// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: $black, $light: $white) {
  @if $color == null {
    @return null;
  }
  @else if $color == color(pinterest) or $color == color(linkedin) or $color == color(twitter) or $color == color(facebook) or $color == color(instagram) or $color == color(orange) or $color == color(orange-2) {
    @return #ffffff;
  }
  @else {
    $color-brightness: brightness($color);
    $light-text-brightness: brightness($light);
    $dark-text-brightness: brightness($dark);

    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
  }
}
